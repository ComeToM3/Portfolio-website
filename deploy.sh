#!/bin/bash

# Script de dÃ©ploiement Docker pour Hordearii
set -e

echo "ðŸš€ DÃ©ploiement Hordearii avec Docker..."

# Couleurs pour les messages
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fonction pour afficher les messages
log_info() {
    echo -e "${BLUE}[INFO]${NC} $1"
}

log_success() {
    echo -e "${GREEN}[SUCCESS]${NC} $1"
}

log_warning() {
    echo -e "${YELLOW}[WARNING]${NC} $1"
}

log_error() {
    echo -e "${RED}[ERROR]${NC} $1"
}

# VÃ©rifier que Docker est installÃ©
if ! command -v docker &> /dev/null; then
    log_error "Docker n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

if ! command -v docker-compose &> /dev/null; then
    log_error "Docker Compose n'est pas installÃ©. Veuillez l'installer d'abord."
    exit 1
fi

log_info "VÃ©rification des prÃ©requis..."

# VÃ©rifier que les fichiers nÃ©cessaires existent
if [ ! -f "docker-compose.yml" ]; then
    log_error "docker-compose.yml non trouvÃ©"
    exit 1
fi

if [ ! -f "backend/Dockerfile" ]; then
    log_error "backend/Dockerfile non trouvÃ©"
    exit 1
fi

if [ ! -f "frontend/Dockerfile" ]; then
    log_error "frontend/Dockerfile non trouvÃ©"
    exit 1
fi

if [ ! -f "nginx/nginx.conf" ]; then
    log_error "nginx/nginx.conf non trouvÃ©"
    exit 1
fi

log_success "Tous les fichiers nÃ©cessaires sont prÃ©sents"

# ArrÃªter les containers existants
log_info "ArrÃªt des containers existants..."
docker-compose down --remove-orphans

# Nettoyer les images obsolÃ¨tes
log_info "Nettoyage des images obsolÃ¨tes..."
docker image prune -f

# Construire les images
log_info "Construction des images Docker..."
docker-compose build --no-cache

# DÃ©marrer les services
log_info "DÃ©marrage des services..."
docker-compose up -d

# Attendre que les services soient prÃªts
log_info "Attente du dÃ©marrage des services..."
sleep 30

# VÃ©rifier l'Ã©tat des services
log_info "VÃ©rification de l'Ã©tat des services..."
docker-compose ps

# Health checks
log_info "VÃ©rification des health checks..."

# Backend health check
if curl -f http://localhost:3001/health > /dev/null 2>&1; then
    log_success "Backend API: OK"
else
    log_error "Backend API: Ã‰CHEC"
fi

# Frontend health check
if curl -f http://localhost:3000 > /dev/null 2>&1; then
    log_success "Frontend: OK"
else
    log_error "Frontend: Ã‰CHEC"
fi

# Nginx health check
if curl -f http://localhost:80/health > /dev/null 2>&1; then
    log_success "Nginx: OK"
else
    log_error "Nginx: Ã‰CHEC"
fi

# Prometheus health check
if curl -f http://localhost:9090/-/healthy > /dev/null 2>&1; then
    log_success "Prometheus: OK"
else
    log_warning "Prometheus: Non accessible (normal si pas encore configurÃ©)"
fi

# Grafana health check
if curl -f http://localhost:3002/api/health > /dev/null 2>&1; then
    log_success "Grafana: OK"
else
    log_warning "Grafana: Non accessible (normal si pas encore configurÃ©)"
fi

# Afficher les logs rÃ©cents
log_info "Logs rÃ©cents des services:"
docker-compose logs --tail=20

# Informations finales
echo ""
log_success "ðŸŽ‰ DÃ©ploiement terminÃ© avec succÃ¨s!"
echo ""
echo "ðŸ“Š Services disponibles:"
echo "  - Frontend: http://localhost:3000"
echo "  - Backend API: http://localhost:3001"
echo "  - Nginx: http://localhost:80"
echo "  - Prometheus: http://localhost:9090"
echo "  - Grafana: http://localhost:3002 (admin/admin)"
echo ""
echo "ðŸ”§ Commandes utiles:"
echo "  - Voir les logs: docker-compose logs -f"
echo "  - ArrÃªter: docker-compose down"
echo "  - RedÃ©marrer: docker-compose restart"
echo "  - Mettre Ã  jour: ./deploy.sh"
echo ""
