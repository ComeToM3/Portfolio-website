// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur pour l'administration
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(USER)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  projects Project[]
  skills   Skill[]

  @@map("users")
}

// Modèle pour les projets du portfolio
model Project {
  id          String   @id @default(cuid())
  title       String
  description String
  image       String?
  technologies String[]
  githubUrl   String?
  liveUrl     String?
  featured    Boolean  @default(false)
  order       Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([title, userId])
  @@map("projects")
}

// Modèle pour les compétences
model Skill {
  id       String   @id @default(cuid())
  name     String
  category SkillCategory
  level    Int      @default(50) // 0-100
  order    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([name, userId])
  @@map("skills")
}

// Modèle pour les messages de contact
model ContactMessage {
  id        String   @id @default(cuid())
  name      String
  email     String
  message   String
  read      Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("contact_messages")
}

// Modèle pour les analytics
model Analytics {
  id        String   @id @default(cuid())
  event     String
  page      String?
  data      Json?
  ip        String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("analytics")
}

// Modèle pour les sessions utilisateur
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  @@map("sessions")
}

// Enums
enum UserRole {
  ADMIN
  USER
}

enum SkillCategory {
  FRONTEND
  BACKEND
  DATABASE
  DEVOPS
  TOOLS
  LANGUAGES
  FRAMEWORKS
  OTHER
}
